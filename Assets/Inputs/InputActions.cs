//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerCC"",
            ""id"": ""d2e1c83b-6e72-4b5f-b554-b27287f3edd9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""82e168de-55c0-478e-9b19-94a94c5700a1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""feed"",
                    ""type"": ""Button"",
                    ""id"": ""02c45890-3eef-4a1f-8da7-df90354157c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""47977150-a025-43b2-99b1-00cc8234db72"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""694351fb-f35c-4c77-9020-09062ff988ee"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4d80b2af-f605-4c92-8c1b-2b945a07ac54"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""25d48cc0-b8cb-4cda-97f6-0c59be4e65ab"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""feed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerCC
        m_PlayerCC = asset.FindActionMap("PlayerCC", throwIfNotFound: true);
        m_PlayerCC_Move = m_PlayerCC.FindAction("Move", throwIfNotFound: true);
        m_PlayerCC_feed = m_PlayerCC.FindAction("feed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerCC
    private readonly InputActionMap m_PlayerCC;
    private IPlayerCCActions m_PlayerCCActionsCallbackInterface;
    private readonly InputAction m_PlayerCC_Move;
    private readonly InputAction m_PlayerCC_feed;
    public struct PlayerCCActions
    {
        private @InputActions m_Wrapper;
        public PlayerCCActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerCC_Move;
        public InputAction @feed => m_Wrapper.m_PlayerCC_feed;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCCActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCCActions instance)
        {
            if (m_Wrapper.m_PlayerCCActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerCCActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerCCActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerCCActionsCallbackInterface.OnMove;
                @feed.started -= m_Wrapper.m_PlayerCCActionsCallbackInterface.OnFeed;
                @feed.performed -= m_Wrapper.m_PlayerCCActionsCallbackInterface.OnFeed;
                @feed.canceled -= m_Wrapper.m_PlayerCCActionsCallbackInterface.OnFeed;
            }
            m_Wrapper.m_PlayerCCActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @feed.started += instance.OnFeed;
                @feed.performed += instance.OnFeed;
                @feed.canceled += instance.OnFeed;
            }
        }
    }
    public PlayerCCActions @PlayerCC => new PlayerCCActions(this);
    public interface IPlayerCCActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFeed(InputAction.CallbackContext context);
    }
}
